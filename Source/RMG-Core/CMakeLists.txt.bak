#
# RMG-Core CMakeLists.txt
#
project(RMG-Core)

set(CMAKE_CXX_STANDARD 20)

find_package(PkgConfig REQUIRED)
pkg_check_modules(SDL2 REQUIRED sdl2)
pkg_check_modules(MINIZIP REQUIRED minizip)
if (WIN32)
    pkg_check_modules(ICONV REQUIRED iconv)
endif(WIN32)

if (NOT PORTABLE_INSTALL)
    include(GNUInstallDirs)
endif(NOT PORTABLE_INSTALL)

# Set BUILD_SHARED_LIBS=ON for GGPO before including it
set(BUILD_SHARED_LIBS ON CACHE BOOL "Build GGPO as a shared library" FORCE)

# Check if GGPO target exists, if not add the subdirectory
if(NOT TARGET GGPO)
    # Disable the Vector War example in GGPO-64
    set(GGPO_BUILD_VECTORWAR OFF CACHE BOOL "Build VectorWar example" FORCE)
    
    # Add the GGPO-64 subdirectory
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../../External/GGPO-64 ${CMAKE_CURRENT_BINARY_DIR}/GGPO-64)
endif()

configure_file(Config.hpp.in Config.hpp)

set(RMG_CORE_SOURCES
    m64p/Api.cpp
    m64p/CoreApi.cpp
    m64p/ConfigApi.cpp
    m64p/PluginApi.cpp
    CachedRomHeaderAndSettings.cpp
    ConvertStringEncoding.cpp
    SpeedLimiter.cpp
    SpeedFactor.cpp
    RomSettings.cpp
    Directories.cpp
    MediaLoader.cpp
    Screenshot.cpp
    RomHeader.cpp
    Emulation.cpp
    SaveState.cpp
    Callback.cpp
    Settings.cpp
    Archive.cpp
    Library.cpp
    Netplay.cpp
    RollbackNetplay.cpp
    Plugins.cpp
    Version.cpp
    Cheats.cpp
    String.cpp
    Volume.cpp
    VidExt.cpp
    Video.cpp
    Error.cpp
    Core.cpp
    File.cpp
    Key.cpp
    Rom.cpp
)

if (DISCORD_RPC)
    list(APPEND RMG_CORE_SOURCES 
        DiscordRpc.cpp
    )
    add_definitions(-DDISCORD_RPC)
endif(DISCORD_RPC)

if (NETPLAY)
    add_definitions(-DNETPLAY)
endif(NETPLAY)

if (PORTABLE_INSTALL)
    add_definitions(-DPORTABLE_INSTALL)
endif(PORTABLE_INSTALL)

if (USE_LIBFMT)
    add_definitions(-DUSE_LIBFMT)
endif(USE_LIBFMT)

# Find dependencies
find_package(ZLIB REQUIRED)

target_include_directories(RMG-Core PRIVATE 
    ${CMAKE_CURRENT_BINARY_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/../
    ${CMAKE_CURRENT_SOURCE_DIR}/../3rdParty/fmt/include/
    ${MINIZIP_INCLUDE_DIRS}
    ${CMAKE_CURRENT_SOURCE_DIR}/m64p
    ${CMAKE_CURRENT_SOURCE_DIR}/m64p_yaml-cpp/include
    ${ZLIB_INCLUDE_DIRS}
)

set_target_properties(RMG-Core PROPERTIES CXX_VISIBILITY_PRESET hidden)

# Copy the GGPO DLL to the RMG-Core directory on Windows
if(WIN32)
    # Get the output directory of the RMG-Core library
    get_target_property(RMG_CORE_OUTPUT_DIR RMG-Core LIBRARY_OUTPUT_DIRECTORY)
    if(NOT RMG_CORE_OUTPUT_DIR)
        # If not set, use the default CMAKE_LIBRARY_OUTPUT_DIRECTORY or the current binary dir
        if(CMAKE_LIBRARY_OUTPUT_DIRECTORY)
            set(RMG_CORE_OUTPUT_DIR ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
        else()
            set(RMG_CORE_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})
        endif()
    endif()

    # Add a post-build command to copy the GGPO DLL
    add_custom_command(TARGET RMG-Core POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        $<TARGET_FILE:GGPO>
        ${RMG_CORE_OUTPUT_DIR}
        COMMENT "Copying GGPO DLL to RMG-Core directory"
    )
endif(WIN32)

add_library(RMG-Core SHARED ${RMG_CORE_SOURCES})

if(UNIX)
    target_link_libraries(RMG-Core dl)
endif(UNIX)

if(WIN32)
    target_link_libraries(RMG-Core wsock32 ws2_32 ${ICONV_LIBRARIES})
endif(WIN32)

target_link_libraries(RMG-Core
    GGPO
    ${MINIZIP_LIBRARIES}
    lzma
    ${SDL2_LIBRARIES}
    ${CMAKE_DL_LIBS}
    ZLIB::ZLIB
)

if (DISCORD_RPC)
    target_link_libraries(RMG-Core
        ${DISCORD_RPC_LIB}
    )
    add_dependencies(RMG-Core discord-rpc)
endif(DISCORD_RPC)
